name: Auto-Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-production:
    name: Auto-Deploy to Production Environment
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://69.62.71.229:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=latest

      - name: Build and push production image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Notify VPS for deployment
        if: success()
        run: |
          echo "🚀 Triggering VPS deployment..."
          
          # Create deployment payload
          DEPLOYMENT_PAYLOAD=$(cat <<EOF
          {
            "action": "completed",
            "workflow_run": {
              "conclusion": "success",
              "head_sha": "${{ github.sha }}",
              "name": "Auto-Deploy to Production"
            },
            "repository": {
              "name": "${{ github.repository }}"
            },
            "pusher": {
              "name": "${{ github.actor }}"
            },
            "ref": "${{ github.ref }}",
            "metadata": {
              "version": "${{ github.sha }}",
              "tags": "${{ steps.meta.outputs.tags }}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }
          EOF
          )

          # Calculate webhook signature
          WEBHOOK_SECRET="${{ secrets.VPS_WEBHOOK_SECRET }}"
          SIGNATURE=$(echo -n "$DEPLOYMENT_PAYLOAD" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" -binary | xxd -p -c 256)

          # Send webhook to VPS
          HTTP_STATUS=$(curl -w "%{http_code}" -o /tmp/webhook_response.txt \
            -X POST \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: workflow_run" \
            -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
            -H "User-Agent: GitHub-Hookshot/auto-deploy" \
            -d "$DEPLOYMENT_PAYLOAD" \
            "${{ secrets.VPS_WEBHOOK_URL }}/webhook/deploy" \
            --connect-timeout 10 \
            --max-time 30)

          # Check response
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ VPS deployment webhook sent successfully"
            echo "Response:" $(cat /tmp/webhook_response.txt)
          else
            echo "❌ VPS deployment webhook failed with status: $HTTP_STATUS"
            echo "Response:" $(cat /tmp/webhook_response.txt)
            exit 1
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **VPS Webhook:** ${{ job.status == 'success' && '✅ Sent' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "- **Status:** 🎉 Deployment initiated successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- **Next:** Check VPS logs for deployment progress" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Action:** Check logs and retry deployment" >> $GITHUB_STEP_SUMMARY
          fi