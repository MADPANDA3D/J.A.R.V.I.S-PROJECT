name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://jarvis.madpanda3d.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval checkpoint
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            console.log(`🚨 Production deployment requested for ${owner}/${repo}@${sha}`);
            console.log('⏳ Awaiting manual approval through GitHub environment protection rules');

            // This will pause here until manual approval is given
            return true;

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=latest

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Pre-deployment backup
        run: |
          echo "Creating pre-deployment backup..."
          # Create backup of current production deployment
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          echo "BACKUP_TAG=$BACKUP_TAG" >> $GITHUB_ENV

          # This will be handled by the deployment script
          echo "Backup tag: $BACKUP_TAG"

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment"
          echo "Image: ${{ steps.meta.outputs.tags }}"
          echo "Backup tag: $BACKUP_TAG"

          # Execute production deployment script
          ./scripts/deploy-production.sh

      - name: Production health verification
        run: |
          echo "Verifying production health..."
          # Wait for deployment to stabilize
          sleep 60

          # Run comprehensive health checks
          ./scripts/smoke-tests.sh production

      - name: Performance monitoring check
        run: |
          echo "Checking post-deployment performance metrics..."
          # Monitor for performance degradation
          curl -f https://jarvis.madpanda3d.com/health

          # Check response times (basic check)
          response_time=$(curl -o /dev/null -s -w '%{time_total}' https://jarvis.madpanda3d.com)
          echo "Response time: ${response_time}s"

          # Alert if response time > 2s
          if (( $(echo "$response_time > 2.0" | bc -l) )); then
            echo "⚠️ Warning: Response time above 2s threshold"
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Production deployment successful!"
            echo "🌐 Available at: https://jarvis.madpanda3d.com"
            echo "📦 Image: ${{ steps.meta.outputs.tags }}"
            echo "💾 Backup: $BACKUP_TAG"
          else
            echo "❌ Production deployment failed!"
            echo "🔄 Initiating automatic rollback..."
            ./scripts/rollback.sh production $BACKUP_TAG
          fi

  rollback-on-failure:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Execute emergency rollback
        run: |
          echo "🚨 Emergency rollback initiated"
          ./scripts/rollback.sh production

      - name: Verify rollback success
        run: |
          echo "Verifying rollback..."
          sleep 30
          ./scripts/smoke-tests.sh production

          if [ $? -eq 0 ]; then
            echo "✅ Rollback successful"
          else
            echo "❌ Rollback failed - manual intervention required"
            exit 1
          fi
