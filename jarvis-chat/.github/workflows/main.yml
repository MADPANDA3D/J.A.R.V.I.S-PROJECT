name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with timing
        run: |
          echo "Starting dependency installation at $(date)"
          time npm ci
          echo "Dependency installation completed at $(date)"

      - name: TypeScript type checking
        run: npm run type-check

      - name: ESLint linting
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:run -- --coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml
          retention-days: 30

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with timing
        run: |
          echo "Starting dependency installation at $(date)"
          time npm ci
          echo "Dependency installation completed at $(date)"

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: GitHub Security Advisories
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_DOCKERFILE_HADOLINT: true

      - name: Run custom security scan
        run: ./scripts/security-scan.sh
        continue-on-error: true

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with timing
        run: |
          echo "Starting dependency installation at $(date)"
          time npm ci
          echo "Dependency installation completed at $(date)"

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          du -sh dist/
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Container Security Scan
        uses: anchore/scan-action@v3
        id: container-scan
        with:
          image: ${{ steps.meta.outputs.tags }}
          fail-build: false
          severity-cutoff: high
        continue-on-error: true

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif-file: ${{ steps.container-scan.outputs.sarif }}
        continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-jarvis.madpanda3d.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Deployment logic will be implemented in deployment scripts

      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests"
          # Smoke test implementation

      - name: Notify deployment status
        if: always()
        run: |
          echo "Staging deployment completed"
          echo "Status: ${{ job.status }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://jarvis.madpanda3d.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval checkpoint
        run: |
          echo "Production deployment requires manual approval"
          echo "Image: ${{ needs.build.outputs.image-tag }}"

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Production deployment logic

      - name: Health check verification
        run: |
          echo "Verifying production health checks"
          # Health check validation

      - name: Notify deployment status
        if: always()
        run: |
          echo "Production deployment completed"
          echo "Status: ${{ job.status }}"

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initiate rollback
        run: |
          echo "Deployment failed - initiating rollback"
          # Rollback logic implementation

      - name: Verify rollback
        run: |
          echo "Verifying rollback success"
          # Rollback verification
