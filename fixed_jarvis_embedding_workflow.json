{
  "name": "JARVIS Knowledge Base Embedding Pipeline",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "jarvis-embedding",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-trigger-1",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "position": [-176, 304],
      "typeVersion": 2.1,
      "webhookId": "jarvis-embedding-webhook"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "name='JARVIS EMPLOYEE FILES' and mimeType='application/vnd.google-apps.folder'",
        "returnAll": true,
        "filter": {},
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [32, 304],
      "id": "find-parent-folder",
      "name": "Find JARVIS EMPLOYEE FILES",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FoGFhCpBxNQvsTCo",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "EMBEDDING FILES",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1gck_prGsmv4JOrkIXwOgKWg3XdFSarET",
            "mode": "list",
            "cachedResultName": "JARVIS EMPLOYEE FILES",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1gck_prGsmv4JOrkIXwOgKWg3XdFSarET"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [256, 304],
      "id": "01915954-c385-4072-b31d-7ec0e815c870",
      "name": "Find EMBEDDING FILES Subfolder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FoGFhCpBxNQvsTCo",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1lTuUMzBUIlhzXRcnQtE7SgNHe7bqqD1M",
            "mode": "list",
            "cachedResultName": "EMBEDDING FILES",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1lTuUMzBUIlhzXRcnQtE7SgNHe7bqqD1M"
          }
        },
        "options": {}
      },
      "id": "get-files-3",
      "name": "Get Files from EMBEDDING FILES",
      "type": "n8n-nodes-base.googleDrive",
      "position": [416, 304],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FoGFhCpBxNQvsTCo",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [624, 304],
      "id": "192d5038-42fc-4872-bae2-aabc9f861bac",
      "name": "Share file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FoGFhCpBxNQvsTCo",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate direct download URLs for Google Drive files\nconst items = $input.all();\nconst processedItems = [];\n\nfor (const item of items) {\n  const fileId = item.json.id;\n  const fileName = item.json.name;\n  const mimeType = item.json.mimeType;\n  \n  // Create direct download URL for Google Drive files\n  const downloadUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;\n  \n  processedItems.push({\n    json: {\n      ...item.json,\n      downloadUrl: downloadUrl,\n      fileName: fileName,\n      mimeType: mimeType,\n      fileId: fileId\n    }\n  });\n}\n\nreturn processedItems;"
      },
      "id": "sharelink-4",
      "name": "Generate Share Links",
      "type": "n8n-nodes-base.code",
      "position": [832, 304],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "={{ $json.downloadUrl }}",
        "options": {
          "response": {
            "response": {}
          },
          "timeout": 30000
        }
      },
      "id": "download-5",
      "name": "Download via Share Link",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1040, 304],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// AI Content Processor - Prepare document data for embedding\nconst items = $input.all();\nconst processedItems = [];\n\nfor (const item of items) {\n  try {\n    // Get the binary data from the HTTP request\n    const binaryData = item.binary?.data;\n    \n    if (!binaryData) {\n      console.log('No binary data found for item:', item.json.fileName);\n      continue;\n    }\n    \n    // Create processed item with metadata\n    const processedItem = {\n      json: {\n        fileName: item.json.fileName || 'unknown',\n        mimeType: item.json.mimeType || 'application/octet-stream',\n        fileId: item.json.fileId || 'unknown',\n        downloadUrl: item.json.downloadUrl || '',\n        processedAt: new Date().toISOString(),\n        source: 'JARVIS EMPLOYEE FILES/EMBEDDING FILES'\n      },\n      binary: {\n        data: binaryData\n      }\n    };\n    \n    processedItems.push(processedItem);\n    \n  } catch (error) {\n    console.error('Error processing item:', error);\n    // Continue processing other items even if one fails\n  }\n}\n\nif (processedItems.length === 0) {\n  throw new Error('No valid documents were processed for embedding');\n}\n\nconsole.log(`Successfully processed ${processedItems.length} documents for embedding`);\nreturn processedItems;"
      },
      "id": "processor-5",
      "name": "AI Content Processor",
      "type": "n8n-nodes-base.code",
      "position": [1264, 304],
      "typeVersion": 2
    },
    {
      "parameters": {
        "loader": "textLoader",
        "options": {}
      },
      "id": "loader-6",
      "name": "Document Loader",
      "type": "@n8n/n8n-nodes-langchain.documentBinaryInputLoader",
      "position": [1504, 304],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chunkSize": 512,
        "chunkOverlap": 50,
        "options": {}
      },
      "id": "chunker-7",
      "name": "Smart Text Chunker",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "position": [1744, 304],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "id": "embedding-8",
      "name": "OpenAI Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [1984, 304],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "FAioNwMmasg9j9f7",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "mode": "name",
          "value": "jarvis-knowledge-base"
        },
        "options": {}
      },
      "id": "qdrant-9",
      "name": "Qdrant Knowledge Base",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [2224, 304],
      "typeVersion": 1.3,
      "credentials": {
        "qdrantApi": {
          "id": "YoZv6ZkDBWLygPIg",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Success Summary - Generate completion report\nconst items = $input.all();\nconst timestamp = new Date().toISOString();\n\n// Count successful embeddings\nconst totalProcessed = items.length;\nconst successfulEmbeddings = items.filter(item => item.json && !item.json.error).length;\n\nconst summary = {\n  success: true,\n  timestamp: timestamp,\n  pipeline: 'JARVIS Knowledge Base Embedding Pipeline',\n  results: {\n    totalDocuments: totalProcessed,\n    successfulEmbeddings: successfulEmbeddings,\n    failedEmbeddings: totalProcessed - successfulEmbeddings,\n    collection: 'jarvis-knowledge-base'\n  },\n  message: `Successfully embedded ${successfulEmbeddings} documents into JARVIS knowledge base`,\n  details: items.map(item => ({\n    fileName: item.json?.metadata?.source || 'unknown',\n    status: item.json?.error ? 'failed' : 'success',\n    error: item.json?.error || null\n  }))\n};\n\nconsole.log('Embedding Pipeline Summary:', JSON.stringify(summary, null, 2));\n\nreturn [{ json: summary }];"
      },
      "id": "summary-10",
      "name": "Success Summary",
      "type": "n8n-nodes-base.code",
      "position": [2464, 304],
      "typeVersion": 2
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Find JARVIS EMPLOYEE FILES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find JARVIS EMPLOYEE FILES": {
      "main": [
        [
          {
            "node": "Find EMBEDDING FILES Subfolder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find EMBEDDING FILES Subfolder": {
      "main": [
        [
          {
            "node": "Get Files from EMBEDDING FILES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Files from EMBEDDING FILES": {
      "main": [
        [
          {
            "node": "Share file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Share file": {
      "main": [
        [
          {
            "node": "Generate Share Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Share Links": {
      "main": [
        [
          {
            "node": "Download via Share Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download via Share Link": {
      "main": [
        [
          {
            "node": "AI Content Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Content Processor": {
      "main": [
        [
          {
            "node": "Document Loader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Loader": {
      "ai_document": [
        [
          {
            "node": "Smart Text Chunker",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Smart Text Chunker": {
      "ai_textSplitter": [
        [
          {
            "node": "OpenAI Embeddings",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Embeddings": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Knowledge Base",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Knowledge Base": {
      "main": [
        [
          {
            "node": "Success Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}