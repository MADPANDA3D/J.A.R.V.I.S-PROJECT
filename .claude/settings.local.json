{
  "permissions": {
    "allow": [
      "Bash(md-tree:*)",
      "Bash(npm:*)",
      "Bash(sudo npm install -g @kayvan/markdown-tree-parser)",
      "Bash(mkdir:*)",
      "Bash(yarn create:*)",
      "Bash(ls:*)",
      "Bash(npx eslint:*)",
      "Bash(rm:*)",
      "Bash(npx husky:*)",
      "Bash(git init:*)",
      "Bash(chmod:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(true)",
      "Bash(npx:*)",
      "Bash(timeout 5s npm run dev)",
      "Bash(docker build:*)",
      "Bash(timeout 10s docker run --rm -p 8080:80 jarvis-chat-test)",
      "Bash(find:*)",
      "Bash(timeout 8s npm run dev)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(node:*)",
      "Bash(grep:*)",
      "Bash(./scripts/security-scan.sh:*)",
      "Bash(./scripts/test-pipeline.sh:*)",
      "Bash(cat:*)",
      "Bash(git push:*)",
      "WebFetch(domain:docs.n8n.io)",
      "WebFetch(domain:js.langchain.com)",
      "WebFetch(domain:api.python.langchain.com)",
      "WebFetch(domain:github.com)",
      "Bash(git submodule:*)",
      "Bash(curl:*)",
      "Bash(git rm:*)",
      "Bash(git branch:*)",
      "Bash(ping:*)",
      "Bash(nmap:*)",
      "Bash(nc:*)",
      "Bash(sudo journalctl:*)",
      "Bash(docker logs:*)",
      "Bash(sed:*)",
      "Bash(git checkout:*)",
      "mcp__n8n-mcp__n8n_diagnostic",
      "mcp__n8n-mcp__tools_documentation",
      "mcp__n8n-mcp__get_node_essentials",
      "mcp__n8n-mcp__validate_workflow",
      "mcp__n8n-mcp__n8n_health_check",
      "mcp__n8n-mcp__n8n_create_workflow",
      "mcp__n8n-mcp__search_nodes",
      "mcp__n8n-mcp__list_ai_tools",
      "mcp__n8n-mcp__n8n_list_executions",
      "mcp__n8n-mcp__validate_workflow_connections",
      "mcp__n8n-mcp__n8n_list_workflows",
      "mcp__n8n-mcp__n8n_validate_workflow",
      "mcp__n8n-mcp__validate_workflow_expressions",
      "mcp__n8n-mcp__n8n_list_available_tools",
      "Bash(timeout 30s npm run lint:*)",
      "Bash(locate:*)",
      "Bash(env)",
      "Bash(echo:*)",
      "Bash(N8N_API_URL=\"https://n8n.madpanda3d.com/\" N8N_API_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1OTJmYTA1ZS00NDNiLTRmOTktYThlMi01NjhlZmJjYmY5OWEiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUzMzgxMDgxfQ.q-DAifXTL6zAIG6w057fyDpVkNPoFnYvbr2Bjc01TKk\" npx n8n-mcp --help)",
      "Bash(export N8N_API_URL=\"https://n8n.madpanda3d.com/\")",
      "Bash(export:*)",
      "Bash(export N8N_API_URL=\"https://n8n.madpanda3d.com/\")",
      "Bash(export:*)",
      "Bash(timeout:*)",
      "Bash(timeout:*)",
      "WebFetch(domain:qdrant.tech)",
      "mcp__n8n-mcp__get_node_for_task",
      "mcp__n8n-mcp__validate_node_minimal",
      "mcp__n8n-mcp__search_node_properties",
      "mcp__n8n-mcp__get_node_info",
      "Bash(rg:*)",
      "mcp__n8n-mcp__n8n_update_full_workflow",
      "mcp__n8n-mcp__get_database_statistics",
      "mcp__n8n-mcp__n8n_update_partial_workflow",
      "Bash(./node_modules/.bin/vite:*)",
      "Bash(./fix-arrows.sh:*)",
      "Bash(# Fix arrow function syntax errors - comprehensive pass\nfind src -type f -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" | xargs sed -i ''\n# Fix catch block syntax\ns/} catch (error) => {/} catch (error) {/g\ns/} catch ([^)]*) => {/} catch (\\1) {/g\n\n# Fix for loop syntax\ns/for (let i = 0; i < [^)]*) => {/for (let i = 0; i < \\1) {/g\n\n# Fix array method callbacks (more specific patterns)\ns/\\.forEach((element) => {/\\.forEach((element) => {/g\ns/\\.map((item) => {/\\.map((item) => {/g\ns/\\.filter((item) => {/\\.filter((item) => {/g\n\n# Fix React hook patterns\ns/useEffect(() => {/useEffect(() => {/g\ns/useState(() => {/useState(() => {/g\n\n# Fix Promise patterns\ns/new Promise((resolve, reject) => {/new Promise((resolve, reject) => {/g\n\n# Fix setTimeout/setInterval patterns\ns/setTimeout(() => {/setTimeout(() => {/g\ns/setInterval(() => {/setInterval(() => {/g\n\n# Fix test patterns\ns/beforeEach(() => {/beforeEach(() => {/g\ns/afterEach(() => {/afterEach(() => {/g\ns/it((.*)) => {/it(\\1) => {/g\ns/describe((.*)) => {/describe(\\1) => {/g\n\n# Fix destructuring parameters\ns/({ [^}]* }) => {/({ \\1 }) => {/g\n\n# Fix arrow function declarations after colons\ns/: ([^=]*) => {/: (\\1) => {/g\n'')",
      "Bash(# Fix specific TypeScript syntax errors\n# First, fix catch blocks\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/} catch (error) => {/} catch (error) {/g'' {} +\n\n# Fix for loop syntax\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/for (let i = 0; i < \\([^)]*\\)) => {/for (let i = 0; i < \\1) {/g'' {} +\n\n# Fix React useEffect patterns\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/useEffect(() => {/useEffect(() => {/g'' {} +\n\n# Fix Promise constructor patterns  \nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/new Promise((resolve, reject) => {/new Promise((resolve, reject) => {/g'' {} +)",
      "Bash(# Fix specific error patterns from the lint output\n\n# Fix function declarations without arrow syntax\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/async getBugs(req: Request, res: Response, next: NextFunction) => {/async getBugs(req: Request, res: Response, next: NextFunction) {/g'' {} +\n\n# Fix export arrow function syntax\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/export const \\([^=]*\\) = (.*) => \\([^>]*\\) =>/export const \\1 = (\\2) => \\3 =>/g'' {} +\n\n# Fix destructuring syntax issues\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/({ \\([^}]*\\) }) => {/({ \\1 }) => {/g'' {} +)",
      "Bash(# Fix specific function syntax in bugDashboard.ts\nsed -i ''s/async getBugs(req: Request, res: Response, next: NextFunction) => {/async getBugs(req: Request, res: Response, next: NextFunction) {/g'' src/api/bugDashboard.ts\n\n# Fix specific line in App.tsx\nsed -i ''s/function App() => {/function App() {/g'' src/App.tsx\n\n# Fix error handling syntax\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/} catch {/} catch (error) {/g'' {} +)",
      "Bash(# Fix missing arrow syntax patterns\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/setTimeout(async () {/setTimeout(async () => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/setInterval(async () {/setInterval(async () => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/\\.then(() {/\\.then(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/\\.catch(() {/\\.catch(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/\\.finally(() {/\\.finally(() => {/g'' {} +)",
      "Bash(# Fix more missing arrow function patterns\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/useEffect(() {/useEffect(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/useState(() {/useState(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/useCallback(() {/useCallback(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/useMemo(() {/useMemo(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/map(() {/map(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/filter(() {/filter(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/forEach(() {/forEach(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/reduce(() {/reduce(() => {/g'' {} +)",
      "Bash(# Fix more complex patterns\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/Promise\\.allSettled(.*\\.map(() {/Promise.allSettled(\\1.map(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/Promise\\.all(.*\\.map(() {/Promise.all(\\1.map(() => {/g'' {} +\n\n# Fix any instances where we have patterns like \"\"function(param) {\"\" instead of \"\"function(param) => {\"\"\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/beforeEach(() {/beforeEach(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/afterEach(() {/afterEach(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/it(''\\''''.*''\\''''.*) {/it(\\1) => {/g'' {} +)",
      "Bash(# Get a sample of the specific lines with errors to understand the patterns\nnpm run lint 2>&1 | head -20 | grep \"\"=>\"\" | head -5)",
      "Bash(# Fix test function patterns - describe and it statements\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i \"\"s/describe(''\\([^'']*\\)'', () {/describe(''\\1'', () => {/g\"\" {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/describe(\"\"\\([^\"\"]*\\)\"\", () {/describe(\"\"\\1\"\", () => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i \"\"s/it(''\\([^'']*\\)'', () {/it(''\\1'', () => {/g\"\" {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/it(\"\"\\([^\"\"]*\\)\"\", () {/it(\"\"\\1\"\", () => {/g'' {} +)",
      "Bash(# Fix more specific patterns\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/\\.some(() {/\\.some(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/\\.every(() {/\\.every(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/\\.find(() {/\\.find(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/\\.sort(() {/\\.sort(() => {/g'' {} +\n\n# Fix Promise.resolve().then patterns\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/Promise\\.resolve()\\.then(() {/Promise.resolve().then(() => {/g'' {} +)",
      "Bash(# Final comprehensive fix for remaining patterns\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/addEventListener(''\\''''.*''\\''''.*() {/addEventListener(\\1, () => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/removeEventListener(''\\''''.*''\\''''.*() {/removeEventListener(\\1, () => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/requestAnimationFrame(() {/requestAnimationFrame(() => {/g'' {} +\nfind src -type f \\( -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" \\) -exec sed -i ''s/requestIdleCallback(() {/requestIdleCallback(() => {/g'' {} +)",
      "Bash(touch:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(NODE_OPTIONS='--max-old-space-size=4096' npx vitest run --reporter=verbose --bail=1)",
      "Bash(NODE_ENV=test npx vitest src/lib/__tests__/bugLifecycleIntegration.test.ts --run --no-coverage -t \"handles escalation workflow correctly\" --pool=threads)",
      "Bash(NODE_ENV=test npx vitest src/lib/__tests__/bugLifecycleIntegration.test.ts --run --no-coverage -t \"handles escalation workflow correctly\")",
      "Bash(NODE_ENV=test npm run test:run src/lib/__tests__/bugLifecycleIntegration.test.ts)",
      "Bash(NODE_ENV=test npx vitest src/lib/__tests__/bugLifecycleIntegration.test.ts --run --no-coverage -t \"sends notifications throughout bug lifecycle\")",
      "Bash(./scripts/ci-test-runner.sh:*)",
      "Bash(dos2unix:*)",
      "Bash(gh run list:*)"
    ],
    "deny": []
  }
}